# File modified by authors of InstructPix2Pix from original (https://github.com/CompVis/stable-diffusion).
# See more details in LICENSE.

model:
  base_learning_rate: 1.0e-04
  target: ldm.models.diffusion.ddpm_re.LatentRestoration
  params:
    linear_start: 0.00085
    linear_end: 0.0120
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: edited
    cond_stage_key: edit
    image_size: 64
    channels: 4
    cond_stage_trainable: false   # Note: different from the one we trained before
    conditioning_key: hybrid
    monitor: val/loss_simple_ema
    scale_factor: 0.18215
    use_ema: true
    load_ema: true

    scheduler_config: # 10000 warmup steps
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [ 0 ]
        cycle_lengths: [ 10000000000000 ] # incredibly large number to prevent corner cases
        f_start: [ 1.e-6 ]
        f_max: [ 1. ]
        f_min: [ 1. ]

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 64 # unused
        in_channels: 8
        out_channels: 4
        model_channels: 320
        attention_resolutions: [ 4, 2, 1 ]
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 4 ]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False

    first_stage_config:
      target: ldm.models.fuser.FusionKL8Feat
      params:
        monitor: "val/rec_loss"
        # ckpt_path: "checkpoints/fuserfeat.ckpt" # this overrided by prior code, so use hard-coding
        embed_dim: 4
        lossconfig:
          target: ldm.modules.losses.LPIPSWithDiscriminator
          params:
            disc_start: 50001
            kl_weight: 0.000001
            disc_weight: 0.5

        ddconfig:
          double_z: True
          z_channels: 4
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult: [ 1,2,4,4 ]  # num_down = len(ch_mult)-1
          num_res_blocks: 2
          attn_resolutions: [ ]
          dropout: 0.0


    cond_stage_config:
      target: ldm.modules.encoders.modules.FrozenCLIPEmbedder

data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 6
    num_workers: 8
    train:
      target: edit_dataset.HighFrequencyOpenImageDataset
      params:
        path: DATASET/openimage
        split: train
        resize_res: 512
        flip_prob: 0.0
        prompt: "a high quality, detailed and professional image"
        filter_d: 15
        filter_sigmaColor: 70
        filter_sigmaSpace: 70
    validation:
      target: edit_dataset.HighFrequencyOpenImageDataset
      params:
        path: DATASET/openimage
        split: val
        resize_res: 512
        prompt: "a high quality, detailed and professional image"
        filter_d: 15
        filter_sigmaColor: 70
        filter_sigmaSpace: 70
